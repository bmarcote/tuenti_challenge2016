{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf460
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 ArialMT;\f2\fnil\fcharset0 Monaco;
}
{\colortbl;\red255\green255\blue255;\red26\green33\blue47;\red64\green64\blue64;\red117\green117\blue117;
\red234\green234\blue234;\red16\green121\blue2;\red19\green112\blue166;\red9\green80\blue173;\red38\green38\blue38;
\red13\green95\blue24;\red0\green0\blue213;\red255\green236\blue236;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs46 \cf2 \expnd0\expndtw0\kerning0
Challenge 18 - Decipher the message
\fs32 \
\pard\pardeftab720\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://contest.tuenti.net/Challenges?id=17"}}{\fldrslt \cf3 \'ab Prev}} {\field{\*\fldinst{HYPERLINK "https://contest.tuenti.net/Challenges?id=19"}}{\fldrslt \cf3 Next \'bb}}\
\pard\pardeftab720\partightenfactor0
\cf2 {{\NeXTGraphic nonlinear.png \width12000 \height11820 \noorient
}¬}\pard\pardeftab720\partightenfactor0
\cf2 \
Many people say that you shouldn't roll your own crypto, but who cares! We've found a completely secure cipher! We're so sure it's safe that we're even giving you its code and a ciphertext. Can you prove us wrong?\
\pard\pardeftab720\partightenfactor0

\f1\b\fs36 \cf2 Input\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs32 \cf2 The ciphertext\
\pard\pardeftab720\partightenfactor0

\f1\b\fs36 \cf2 Output\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs32 \cf2 The plaintext\
\pard\pardeftab720\parhyphenfactor20\partightenfactor0

\b \cf2 NOTE:
\b0  In this level, the output for the submit phase is the same as the output for the test phase.\
\pard\pardeftab720\partightenfactor0
\cf2 HTML generated using hilite.me\
\pard\pardeftab720\partightenfactor0

\f2 \cf4 \cb5 #!/usr/bin/env python\cf2 \
\pard\pardeftab720\partightenfactor0
\cf6 import\cf2  \cf7 sys\cf2 \
\
\cf6 def\cf2  \cf8 cipher\cf2 (pt):\
    l \cf9 =\cf2  \cf10 len\cf2 (pt)\
    k \cf9 =\cf2  l \cf9 //\cf2  \cf11 2\cf2 \
    ct \cf9 =\cf2  \cb12 ''\cb5 \
    \cf6 for\cf2  i in \cf10 range\cf2 (l):\
        ct \cf9 +=\cf2  \cf10 hex\cf2 (\cf10 ord\cf2 (pt[i]) \cf9 ^\cf2  \cf10 ord\cf2 (pt[k]))[\cf11 2\cf2 :]\cf9 .\cf2 zfill(\cf11 2\cf2 )\
        \cf6 if\cf2  \cf10 ord\cf2 (pt[i]) \cf9 %\cf2  \cf11 3\cf2  \cf9 ==\cf2  \cf11 0\cf2 :\
            k \cf9 =\cf2  (k \cf9 +\cf2  \cf11 1\cf2 ) \cf9 %\cf2  l\
        \cf6 elif\cf2  \cf10 ord\cf2 (pt[i]) \cf9 %\cf2  \cf11 3\cf2  \cf9 ==\cf2  \cf11 1\cf2 :\
            k \cf9 =\cf2  (k \cf9 -\cf2  \cf11 1\cf2 ) \cf9 %\cf2  l\
        \cf6 else\cf2 :\
            k \cf9 =\cf2  l \cf9 //\cf2  \cf11 2\cf2 \
    \cf6 return\cf2  ct\
\
sys\cf9 .\cf2 stdout\cf9 .\cf2 write(cipher(\cf10 open\cf2 (\cb12 'solution.txt'\cb5 )\cf9 .\cf2 read()))\
}